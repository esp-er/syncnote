package com.raywenderlich.jetnotes.data


//import com.raywenderlich.jetnotes.OpenNotesDb
import com.raywenderlich.jetnotes.OpenNotesDb
import com.raywenderlich.jetnotes.db.ExternNoteDb
import com.raywenderlich.jetnotes.db.NotePropertyDb //Generated by sqlDelight
import com.squareup.sqldelight.db.SqlDriver


class ExternDatabaseHelper(
    private val sqlDriver: SqlDriver,
) {
    private val dbRef: OpenNotesDb = OpenNotesDb(sqlDriver)

    fun fetchAllNotes(): List<NotePropertyDb> {
        val ll = dbRef.externTableQueries
            .getAllNotes()
            .executeAsList()

        return ll.map(ExternNoteDb::toNotePropertyDb)
    }

    fun fetchNote(id: String): NotePropertyDb? =
        dbRef.externTableQueries.getNote(id)
            .executeAsOneOrNull()
            ?.toNotePropertyDb()

    fun insertAll(notes: List<NotePropertyDb>){
        notes.forEach{ note -> insert(note) }
    }

    fun clearAll(){
        dbRef.externTableQueries.clearAllNotes()
    }

    fun insert(note: NotePropertyDb) {
        val tmp = note.toExternNoteDb()
        dbRef.externTableQueries
            .insertUpdateNote(
                tmp.id,
                tmp.title,
                tmp.content,
                tmp.colorId,
                tmp.canBeChecked,
                tmp.isChecked,
                tmp.isArchived,
                tmp.editDate,
                tmp.isPinned
            )
    }

    fun removeNote(id: String) {
        dbRef.externTableQueries.deleteNote(id)
    }
}

fun ExternNoteDb.toNotePropertyDb() = NotePropertyDb(
    id = id, title = title, content = content, colorId = colorId, canBeChecked = canBeChecked, isChecked = isChecked, isArchived = isArchived,
    editDate= editDate, isPinned = isPinned
)

fun NotePropertyDb.toExternNoteDb() = ExternNoteDb(
    id = id, title = title, content = content, colorId = colorId, canBeChecked = canBeChecked, isChecked = isChecked, isArchived = isArchived,
    editDate= editDate, isPinned = isPinned
)




